<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[元气糯米团子的Coding Blog]]></title>
  <subtitle><![CDATA[Tansform information as knowledges, extract and purify as thoughts]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://developerworks.github.io/"/>
  <updated>2015-11-02T03:48:00.000Z</updated>
  <id>http://developerworks.github.io/</id>
  
  <author>
    <name><![CDATA[zhiqiang he]]></name>
    <email><![CDATA[developerworks@163.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[故障转移和接管]]></title>
    <link href="http://developerworks.github.io/2015/11/02/elixir-failover-and-takeover/"/>
    <id>http://developerworks.github.io/2015/11/02/elixir-failover-and-takeover/</id>
    <published>2015-11-01T18:10:29.000Z</published>
    <updated>2015-11-02T03:48:00.000Z</updated>
    <content type="html"><![CDATA[<p>2015-11-02 更新</p>
<p>Elixir 可以运行在主/从, 故障转移/接管模式下. 要使Elixir应用程序能够执行故障转移/接管, Elixir应用程序必须是一个OTP应用程序.</p>
<p>下面来创建一个包含Supervisor的Elixir项目</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mix new distro --sup</span><br></pre></td></tr></table></figure>
<p>修改<code>distro.ex</code>添加<code>logger</code>模块. 以记录当触发故障转移/接管操作时的日志记录.</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">Distro</span></span> <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">use</span> <span class="constant">Application</span></span><br><span class="line">  require <span class="constant">Logger</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">start</span></span>(type, <span class="constant">_args)</span> <span class="keyword">do</span></span><br><span class="line">    import <span class="constant">Supervisor.Spec,</span> <span class="symbol">warn:</span> <span class="keyword">false</span></span><br><span class="line">    <span class="constant">Logger.</span>info(<span class="string">"Distro application in <span class="subst">#&#123;inspect type&#125;</span> mode"</span>)</span><br><span class="line">    children = [</span><br><span class="line">      worker(<span class="constant">Distro.Worker,</span> [])</span><br><span class="line">    ]</span><br><span class="line">    opts = [<span class="symbol">strategy:</span> <span class="symbol">:one_for_one</span>, <span class="symbol">name:</span> <span class="constant">Distro.Supervisor]</span></span><br><span class="line">    <span class="constant">Supervisor.</span>start_link(children, opts)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p><code>Distro.Worker</code>是一个<code>GenServer</code>: 它使用全局名称注册, 假设其运行在集群中的一个节点上, 全局注册让我们不用考虑其实际的运行位置, 只需要提供注册名称就可以访问.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">defmodule Distro.Worker do&#10;  use GenServer&#10;  require Logger&#10;  def start_link do&#10;    GenServer.start_link(__MODULE__, [], name: &#123;:global, __MODULE__&#125;)&#10;  end&#10;  def init([]) do&#10;    &#123;:ok, [], 1000&#125;&#10;  end&#10;  def handle_info(:timeout, state) do&#10;    Logger.debug &#34;timeout&#34;&#10;    &#123;:noreply, state, 1000&#125;&#10;  end&#10;end</span><br></pre></td></tr></table></figure>
<p>编译</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mix compile</span><br></pre></td></tr></table></figure>
<h2 id="应用程序分布">应用程序分布</h2><p>本节阐述了如何把一个应用程序分布到多个节点上</p>
<p>假设应用程序运行在3个节点上, 名称分别为<code>abc</code>, <code>bcd</code>, <code>def</code>. 创建三个配置文件如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch config/abc.config&#10;touch config/bcd.config&#10;touch config/def.config</span><br></pre></td></tr></table></figure>
<p>配置文件中有3个重要的键值对.</p>
<p>abc.config</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#10;  &#123;logger,[&#123;console,[&#123;format,&#60;&#60;&#34;$date $time $metadata[$level] $message\n&#34;&#62;&#62;&#125;]&#125;]&#125;,&#10;  &#123;kernel,&#10;    [&#123;distributed, [&#123;&#39;distro&#39;, 5000, [&#39;abc@192.168.8.104&#39;, &#123;&#39;bcd@192.168.8.104&#39;, &#39;def@192.168.8.104&#39;&#125;]&#125;]&#125;,&#10;     &#123;sync_nodes_mandatory, [&#39;bcd@192.168.8.104&#39;, &#39;def@192.168.8.104&#39;]&#125;,&#10;     &#123;sync_nodes_timeout, 30000&#125;&#10;]&#125;].</span><br></pre></td></tr></table></figure>
<p>bcd.config</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#10;  &#123;logger,[&#123;console,[&#123;format,&#60;&#60;&#34;$date $time $metadata[$level] $message\n&#34;&#62;&#62;&#125;]&#125;]&#125;,&#10;  &#123;kernel,&#10;    [&#123;distributed, [&#123;distro,5000, [&#39;abc@192.168.8.104&#39;, &#123;&#39;bcd@192.168.8.104&#39;, &#39;def@192.168.8.104&#39;&#125;]&#125;]&#125;,&#10;     &#123;sync_nodes_mandatory, [&#39;abc@192.168.8.104&#39;, &#39;def@192.168.8.104&#39;]&#125;,&#10;     &#123;sync_nodes_timeout, 30000&#125;&#10;]&#125;].</span><br></pre></td></tr></table></figure>
<p>def.config</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#10;  &#123;logger,[&#123;console,[&#123;format,&#60;&#60;&#34;$date $time $metadata[$level] $message\n&#34;&#62;&#62;&#125;]&#125;]&#125;,&#10;  &#123;kernel,&#10;    [&#123;distributed, [&#123;distro,5000, [&#39;abc@192.168.8.104&#39;, &#123;&#39;bcd@192.168.8.104&#39;, &#39;def@192.168.8.104&#39;&#125;]&#125;]&#125;,&#10;     &#123;sync_nodes_mandatory, [&#39;abc@192.168.8.104&#39;, &#39;bcd@192.168.8.104&#39;]&#125;,&#10;     &#123;sync_nodes_timeout, 30000&#125;&#10;]&#125;].</span><br></pre></td></tr></table></figure>
<p>在不同的终端自动全部3个节点</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iex --name abc@192.168.8.104 -pa _build/dev/lib/distro/ebin/ --app distro --erl &#34;-config config/abc&#34;&#10;iex --name bcd@192.168.8.104 -pa _build/dev/lib/distro/ebin/ --app distro --erl &#34;-config config/bcd&#34;&#10;iex --name def@192.168.8.104 -pa _build/dev/lib/distro/ebin/ --app distro --erl &#34;-config config/def&#34;</span><br></pre></td></tr></table></figure>
<h2 id="验证步骤">验证步骤</h2><ol>
<li>终止(Ctrl+C两次)节点<code>abc@192.168.8.104</code>后,5秒内会在节点<code>bcd@192.168.8.104</code>上重启应用</li>
<li>再次启动节点<code>abc@192.168.8.104</code>后,应用在<code>bcd@192.168.8.104</code>上停止, 应用被恢复后的<code>abc@192.168.8.104</code>节点接管(Takeover)</li>
</ol>
<h2 id="参考资料">参考资料</h2><ol>
<li>Elixir Application Failover/Takeover <a href="https://erlangcentral.org/topic/elixir-application-failovertakeover/" target="_blank" rel="external">https://erlangcentral.org/topic/elixir-application-failovertakeover/</a></li>
<li>源码仓库: <a href="https://github.com/developerworks/distro" target="_blank" rel="external">https://github.com/developerworks/distro</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>2015-11-02 更新</p>
<p>Elixir 可以运行在主/从, 故障转移/接管模式下. 要使Elixir应用程序能够执行故障转移/接管, Elixir应用程序必须是一个OTP应用程序.</p>
<p>下面来创建一个包含Supervisor的Elixir项目</p]]>
    </summary>
    
      <category term="Elixir" scheme="http://developerworks.github.io/tags/Elixir/"/>
    
      <category term="Elixir" scheme="http://developerworks.github.io/categories/Elixir/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[用Elixir Mix构建Ejabberd发行包]]></title>
    <link href="http://developerworks.github.io/2015/09/17/ejabberd-with-elixir-mix/"/>
    <id>http://developerworks.github.io/2015/09/17/ejabberd-with-elixir-mix/</id>
    <published>2015-09-17T01:15:34.000Z</published>
    <updated>2015-09-17T01:37:21.000Z</updated>
    <content type="html"><![CDATA[<p>Github上Ejabberd最新版15.07支持通过Elixir Mix构建工具创建Ejabberd的发行(部署)包.</p>
<p>详细信息参考这篇BLog: <a href="https://blog.process-one.net/building-an-otp-release-for-ejabberd-with-elixir-mix/" target="_blank" rel="external">https://blog.process-one.net/building-an-otp-release-for-ejabberd-with-elixir-mix/</a></p>
<p>其使用了Elixir的<code>exrm</code>打包工具</p>
<h1 id="构建过程和步骤">构建过程和步骤</h1><h2 id="1-_创建目录和克隆仓库">1. 创建目录和克隆仓库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir ejabberd-demo1&#10;mkdir ejabberd-demo1/deploy&#10;cd ejabberd-demo1&#10;git clone https://github.com/processone/ejabberd.git</span><br></pre></td></tr></table></figure>
<h2 id="2-_编译">2. 编译</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ejabberd-demo1/ejabberd&#10;mix do deps.get, compile</span><br></pre></td></tr></table></figure>
<h2 id="3-_创建发布包">3. 创建发布包</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MIX_ENV=prod mix release</span><br></pre></td></tr></table></figure>
<h2 id="4-_部署">4. 部署</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p deploy/ejabberd&#10;tar zxvf rel/ejabberd/releases/15.07.0/ejabberd.tar.gz  -C deploy/ejabberd</span><br></pre></td></tr></table></figure>
<h2 id="5-_创建配置文件">5. 创建配置文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir deploy/ejabberd/config&#10;cd deploy/ejabberd/config&#10;wget https://gist.githubusercontent.com/mremond/383666d563025e86adfe/raw/723dfa50c955c112777f3361b4f2067b76a55d7b/ejabberd.yml</span><br></pre></td></tr></table></figure>
<h2 id="6-_启动">6. 启动</h2><p>前台运行(调试)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deploy/ejabberd/bin/ejabberd console</span><br></pre></td></tr></table></figure>
<p>后台运行(产品环境)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deploy/ejabberd/bin/ejabberd start</span><br></pre></td></tr></table></figure>
<h2 id="7-_注册一个测试用户">7. 注册一个测试用户</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:ejabberd_auth.try_register(&#34;user1&#34;, &#34;localhost&#34;, &#34;mypass&#34;)</span><br></pre></td></tr></table></figure>
<h2 id="8-_停止Ejabberd">8. 停止Ejabberd</h2><p>调试</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:init.stop()</span><br></pre></td></tr></table></figure>
<h1 id="热代码替换步骤">热代码替换步骤</h1><p>假定在15.07.0中发现了一个BUG, 修改该BUG后, 更新线上系统.</p>
<h2 id="1-_修改Ejabberd源码">1. 修改Ejabberd源码</h2><p>比如修改一个线上的程序BUG</p>
<h2 id="2-_修改Mix项目文件">2. 修改Mix项目文件</h2><p>修改Ejabberd源码根目录下的<code>mix.exs</code>文件, 提升版本号</p>
<h2 id="3-_编译">3. 编译</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mix compile</span><br></pre></td></tr></table></figure>
<h2 id="4-_重新生产新的发行包">4. 重新生产新的发行包</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MIX_ENV=prod mix release</span><br></pre></td></tr></table></figure>
<h2 id="5-_实时升级线上系统">5. 实时升级线上系统</h2><ul>
<li>创建一个新目录</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p deploy/ejabberd/releases/15.07.1</span><br></pre></td></tr></table></figure>
<ul>
<li>创建新发行文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf rel/ejabberd/releases/15.07.1/ejabberd.tar.gz  -C deploy/ejabberd</span><br></pre></td></tr></table></figure>
<ul>
<li>执行升级</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deploy/ejabberd/bin/ejabberd upgrade &#34;15.07.1&#34;</span><br></pre></td></tr></table></figure>
<h2 id="结语">结语</h2><p>上述只是一个基本过程, 实际项目往往比这个过程复杂, 这个简单的过程只是说明如何使用.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Github上Ejabberd最新版15.07支持通过Elixir Mix构建工具创建Ejabberd的发行(部署)包.</p>
<p>详细信息参考这篇BLog: <a href="https://blog.process-one.net/building-an-otp-r]]>
    </summary>
    
      <category term="Elixir" scheme="http://developerworks.github.io/tags/Elixir/"/>
    
      <category term="Ejabberd" scheme="http://developerworks.github.io/categories/Ejabberd/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[UFTP - 基于UDP的加密文件多播传输协议]]></title>
    <link href="http://developerworks.github.io/2015/06/05/uftp/"/>
    <id>http://developerworks.github.io/2015/06/05/uftp/</id>
    <published>2015-06-05T08:29:29.000Z</published>
    <updated>2015-06-05T08:48:00.000Z</updated>
    <content type="html"><![CDATA[<p>UFTP - Encrypted UDP based FTP with multicast</p>
<h2 id="应用场景">应用场景</h2><ul>
<li>软件包分发</li>
<li>视频流分发</li>
</ul>
<h2 id="下载和编译">下载和编译</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://sourceforge.net/projects/uftp-multicast/files/source-tar/uftp-4.7.tar&#10;tar xf uftp-4.7.tar&#10;cd uftp-4.7&#10;make&#10;make install</span><br></pre></td></tr></table></figure>
<h2 id="测试和使用">测试和使用</h2><p>查看manpage</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">man uftpd&#10;man uftp</span><br></pre></td></tr></table></figure>
<p>uftpd是客户端守护进程, 用于一直监听服务端发送的多播包<br>uftp是服务端, 用于发送文件</p>
<p>客户端监听在本地接口en0的50002端口上, 并接受多播地址为224.0.0.100的多播包</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./uftpd -d -I en0 -D /tmp/uftp/done -T /tmp/uftp/receiving -M 224.0.0.100</span><br></pre></td></tr></table></figure>
<p>服务器端发送文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./uftp -R 500 -p 50002 -I en0 -x 5 -M 224.0.0.100 -P 224.0.0.100 ../update.zip</span><br></pre></td></tr></table></figure>
<h2 id="常用命令行选项解释">常用命令行选项解释</h2><p><img src="/assets/uftp.jpg" alt="UFTP命令行参数"></p>
<h2 id="参考资料">参考资料</h2><ol>
<li><a href="http://en.wikipedia.org/wiki/UFTP" target="_blank" rel="external">http://en.wikipedia.org/wiki/UFTP</a></li>
<li><a href="http://uftp-multicast.sourceforge.net" target="_blank" rel="external">http://uftp-multicast.sourceforge.net</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>UFTP - Encrypted UDP based FTP with multicast</p>
<h2 id="应用场景">应用场景</h2><ul>
<li>软件包分发</li>
<li>视频流分发</li>
</ul>
<h2 id="下载和编译">下载和编译</h]]>
    </summary>
    
      <category term="UFTP" scheme="http://developerworks.github.io/tags/UFTP/"/>
    
      <category term="Linux" scheme="http://developerworks.github.io/categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Web加密API - 散列(Hashing)]]></title>
    <link href="http://developerworks.github.io/2015/06/04/html5-web-cryptography-api-hashing/"/>
    <id>http://developerworks.github.io/2015/06/04/html5-web-cryptography-api-hashing/</id>
    <published>2015-06-04T09:02:49.000Z</published>
    <updated>2015-06-04T09:10:52.000Z</updated>
    <content type="html"><![CDATA[<p>本文说明了如何使用Web加密API生成数据的HASH值.</p>
<h2 id="转换字符串为ArrayBuffer,并且把ArrayBuffer转换为16进制字符串">转换字符串为ArrayBuffer,并且把ArrayBuffer转换为16进制字符串</h2><p>要生成字符串文本或二进制数据的Hash值, 必须先把它转换为ArrayBuffer类型.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">convertStringToArrayBufferView</span>(<span class="params">str</span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> bytes = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(str.length);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> iii = <span class="number">0</span>; iii &lt; str.length; iii++)</span><br><span class="line">    &#123;</span><br><span class="line">        bytes[iii] = str.charCodeAt(iii);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bytes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">convertArrayBufferToHexaDecimal</span>(<span class="params">buffer</span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> data_view = <span class="keyword">new</span> <span class="built_in">DataView</span>(buffer)</span><br><span class="line">    <span class="keyword">var</span> iii, len, hex = <span class="string">''</span>, c;</span><br><span class="line">    <span class="keyword">for</span>(iii = <span class="number">0</span>, len = data_view.byteLength; iii &lt; len; iii += <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        c = data_view.getUint8(iii).toString(<span class="number">16</span>);</span><br><span class="line">        <span class="keyword">if</span>(c.length &lt; <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            c = <span class="string">'0'</span> + c;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        hex += c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> hex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="生成字符串的HASH值">生成字符串的HASH值</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var data = &#34;QNimate&#34;;&#10;&#10;var crypto = window.crypto || window.msCrypto;&#10;&#10;if(crypto.subtle)&#10;&#123;&#10;    alert(&#34;Cryptography API Supported&#34;);&#10;&#10;    var promise = crypto.subtle.digest(&#123;name: &#34;SHA-256&#34;&#125;, convertStringToArrayBufferView(data));&#10;&#10;    promise.then(function(result)&#123;&#10;        var hash_value = convertArrayBufferToHexaDecimal(result);&#10;    &#125;);&#10;&#125;&#10;else&#10;&#123;&#10;    alert(&#34;Cryptography API not Supported&#34;);&#10;&#125;</span><br></pre></td></tr></table></figure>
<h2 id="参考资料">参考资料</h2><ol>
<li><a href="http://qnimate.com/hashing-using-web-cryptography-api/" target="_blank" rel="external">http://qnimate.com/hashing-using-web-cryptography-api/</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>本文说明了如何使用Web加密API生成数据的HASH值.</p>
<h2 id="转换字符串为ArrayBuffer,并且把ArrayBuffer转换为16进制字符串">转换字符串为ArrayBuffer,并且把ArrayBuffer转换为16进制字符串</h2><p>要生]]>
    </summary>
    
      <category term="Web Cryptography API" scheme="http://developerworks.github.io/tags/Web-Cryptography-API/"/>
    
      <category term="HTML5" scheme="http://developerworks.github.io/categories/HTML5/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[HTTP协议的三种模式]]></title>
    <link href="http://developerworks.github.io/2015/06/04/the-3-modes-of-http-protocol/"/>
    <id>http://developerworks.github.io/2015/06/04/the-3-modes-of-http-protocol/</id>
    <published>2015-06-04T04:58:54.000Z</published>
    <updated>2015-06-04T05:05:36.000Z</updated>
    <content type="html"><![CDATA[<h2 id="CLOSE">CLOSE</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#36830;&#25509;1] [&#35831;&#27714;1] ... [&#21709;&#24212;1] [&#20851;&#38381;1] [&#36830;&#25509;2] [&#35831;&#27714;2] ... [&#21709;&#24212;2] [&#20851;&#38381;2] ...</span><br></pre></td></tr></table></figure>
<p>特点:<br>没一个请求都要建立新的连接, 请求完毕关闭连接</p>
<h2 id="KEEP-ALIVE">KEEP-ALIVE</h2><p><code>KEEP-ALIVE</code>模式是为了解决<code>CLOSE</code>模式频繁建立和关闭连接开销的问题. 它在一个连接中可以执行多次请求</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#36830;&#25509;] [&#35831;&#27714;1] ... [&#21709;&#24212;1] [&#35831;&#27714;2] ... [&#21709;&#24212;2] [&#20851;&#38381;] ...</span><br></pre></td></tr></table></figure>
<p>特点:</p>
<p>请求是串行的, 当前请求只有在客户端收到响应后才能执行下一次请求, 它是事务性的.</p>
<h2 id="PIPELINING">PIPELINING</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#36830;&#25509;] [&#35831;&#27714;1] [&#35831;&#27714;2]... [&#21709;&#24212;1][&#21709;&#24212;2] [&#20851;&#38381;] ...</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="CLOSE">CLOSE</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td cl]]>
    </summary>
    
      <category term="Http modes" scheme="http://developerworks.github.io/tags/Http-modes/"/>
    
      <category term="HTTP" scheme="http://developerworks.github.io/categories/HTTP/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Ejabberd 用Elixir开发一个包过滤模块]]></title>
    <link href="http://developerworks.github.io/2015/05/21/ejabberd-with-elixir-packet-filters/"/>
    <id>http://developerworks.github.io/2015/05/21/ejabberd-with-elixir-packet-filters/</id>
    <published>2015-05-21T13:21:04.000Z</published>
    <updated>2015-09-17T04:29:18.000Z</updated>
    <content type="html"><![CDATA[<p>过滤模块主要用于</p>
<h2 id="创建一个模块骨架">创建一个模块骨架</h2><p>在Ejabberd源码根目录下的<code>lib</code>目录中创建 <code>filter_packet_demo.ex</code>模块文件, 代码如下:</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">FilterPacketDemo</span></span> <span class="keyword">do</span></span><br><span class="line">  import <span class="constant">Ejabberd.Logger</span></span><br><span class="line">  <span class="variable">@behaviour</span> <span class="symbol">:gen_mod</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">start</span></span>(<span class="constant">_host,</span> <span class="constant">_opts)</span> <span class="keyword">do</span></span><br><span class="line">    info(<span class="string">'Starting ejabberd module Filter Packet Demo'</span>)</span><br><span class="line">    <span class="constant">Ejabberd.Hooks.</span>add(<span class="symbol">:filter_packet</span>, <span class="symbol">:global</span>, <span class="constant">__ENV__.</span><span class="keyword">module</span>, <span class="symbol">:on_filter_packet</span>, <span class="number">50</span>)</span><br><span class="line">    <span class="symbol">:ok</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">stop</span></span>(<span class="constant">_host)</span> <span class="keyword">do</span></span><br><span class="line">    info(<span class="string">'Stopping ejabberd module Filter Packet Demo'</span>)</span><br><span class="line">    <span class="constant">Ejabberd.Hooks.</span>delete(<span class="symbol">:filter_packet</span>, <span class="symbol">:global</span>, <span class="constant">__ENV__.</span><span class="keyword">module</span>, <span class="symbol">:on_filter_packet</span>, <span class="number">50</span>)</span><br><span class="line">    <span class="symbol">:ok</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">on_filter_packet</span></span>(&#123;from, to, xml=&#123;<span class="symbol">:xmlel</span>, <span class="string">"message"</span>, attributes, children&#125;&#125; = packet) <span class="keyword">do</span></span><br><span class="line">    info(<span class="string">"Filtering packet: <span class="subst">#&#123;inspect &#123;from, to, xml&#125;</span>&#125;"</span>)</span><br><span class="line">    <span class="comment"># 访问XML元素属性</span></span><br><span class="line">    <span class="comment"># attributes 是一个形如 [&#123;"type", "chat"&#125;, ...]的元组列表, 为了方便访问, 使用如下函数转换为关键字列表</span></span><br><span class="line">    convert = <span class="keyword">fn</span> &#123;k,v&#125; -&gt;</span><br><span class="line">        &#123;<span class="constant">String.</span>to_atom(k), v&#125;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    attribute_keywords = attributes |&gt; <span class="constant">Enum.</span>map convert</span><br><span class="line">    type = attribute_keywords[<span class="symbol">:type</span>]</span><br><span class="line">    <span class="keyword">cond</span> <span class="keyword">do</span></span><br><span class="line">        type == <span class="string">"chat"</span> -&gt;</span><br><span class="line">            dosomething()</span><br><span class="line">        type == <span class="string">"headline"</span> -&gt;</span><br><span class="line">            dosomething()</span><br><span class="line">        type == <span class="string">"groupchat"</span> -&gt;</span><br><span class="line">            dosomething()</span><br><span class="line">        <span class="keyword">true</span> -&gt;</span><br><span class="line">            <span class="keyword">true</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    packet</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">dosomething</span></span> <span class="keyword">do</span></span><br><span class="line">    <span class="constant">IO.</span>puts <span class="string">"Do something."</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h2 id="编译,安装,动态更新">编译,安装,动态更新</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># &#32534;&#35793;&#10;make&#10;make install</span><br></pre></td></tr></table></figure>
<h1 id="启动">启动</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ejabberdctl live</span><br></pre></td></tr></table></figure>
<h1 id="进入调试控制台">进入调试控制台</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ejabberdctl debug</span><br></pre></td></tr></table></figure>
<h1 id="在调试控制台中运行">在调试控制台中运行</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(ejabberd@localhost)1&#62; ejabberd_update:update().&#10;&#123;ok,[]&#125;</span><br></pre></td></tr></table></figure>
<h2 id="参考资料">参考资料</h2><ol>
<li>Elixir Sips: ejabberd with Elixir – Part 2<br><a href="https://blog.process-one.net/ejabberd-with-elixir-packet-filters/" target="_blank" rel="external">https://blog.process-one.net/ejabberd-with-elixir-packet-filters/</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>过滤模块主要用于</p>
<h2 id="创建一个模块骨架">创建一个模块骨架</h2><p>在Ejabberd源码根目录下的<code>lib</code>目录中创建 <code>filter_packet_demo.ex</code>模块文件, 代码如下:</p>
<f]]>
    </summary>
    
      <category term="Elixir" scheme="http://developerworks.github.io/tags/Elixir/"/>
    
      <category term="Ejabberd" scheme="http://developerworks.github.io/categories/Ejabberd/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Chrome 开发入门]]></title>
    <link href="http://developerworks.github.io/2015/05/18/chrome-dev-get-started/"/>
    <id>http://developerworks.github.io/2015/05/18/chrome-dev-get-started/</id>
    <published>2015-05-18T09:28:10.000Z</published>
    <updated>2015-05-21T13:24:09.000Z</updated>
    <content type="html"><![CDATA[<h2 id="安装">安装</h2><ul>
<li>从 <a href="">Chrome Dev Editor</a> 安装该编辑器</li>
<li>从应用启动器或<code>chrome://apps</code>打开Chrome Dev Editor</li>
</ul>
<h2 id="Chrome_Dev_Editor功能">Chrome Dev Editor功能</h2><ul>
<li>Chrome Apps</li>
</ul>
<h2 id="参考资料">参考资料</h2><ol>
<li>Chrome Dev Editor 入门<br><a href="https://github.com/GoogleChrome/chromedeveditor/blob/master/doc/GettingStarted.md" target="_blank" rel="external">https://github.com/GoogleChrome/chromedeveditor/blob/master/doc/GettingStarted.md</a></li>
<li>图书 [Programming Chrome Apps] 第6页 [Using the Chrome Dev Editor]</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="安装">安装</h2><ul>
<li>从 <a href="">Chrome Dev Editor</a> 安装该编辑器</li>
<li>从应用启动器或<code>chrome://apps</code>打开Chrome Dev Editor</li>
</u]]>
    </summary>
    
      <category term="Chrome" scheme="http://developerworks.github.io/tags/Chrome/"/>
    
      <category term="Chrome" scheme="http://developerworks.github.io/categories/Chrome/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Web加密API指南]]></title>
    <link href="http://developerworks.github.io/2015/05/18/html5-web-cryptography-api-tutorial/"/>
    <id>http://developerworks.github.io/2015/05/18/html5-web-cryptography-api-tutorial/</id>
    <published>2015-05-18T05:07:13.000Z</published>
    <updated>2015-06-04T09:03:31.000Z</updated>
    <content type="html"><![CDATA[<p>Web加密API提供了执行像散列, 对称 &amp; 非对称加密, 生成 &amp; 校验数字签名等操作的Javascript接口.</p>
<p>本文将介绍加密基础和<a href="http://www.w3.org/TR/WebCryptoAPI" target="_blank" rel="external">Web Cryptography API</a></p>
<p>使用Web Cryptography API需要浏览器的支持, 目前集中常用浏览器的支持情况是:</p>
<ul>
<li>Microsoft Edge</li>
<li>Google Chrome 37+</li>
<li>Mozilla Firefox 37+</li>
<li>Apple Safari 8+</li>
<li>Opera 27+</li>
</ul>
<p>其他浏览器可参考参考资料2</p>
<h2 id="使用Web加密API">使用Web加密API</h2><h3 id="安全源策略(Secure_Origin_Policy)">安全源策略(Secure Origin Policy)</h3><p>当且仅当Javascript运行在一个安全源Web页面时, 可访问Web加密API.</p>
<p>“安全源” 是至少匹配如下模式的来源:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(https, *, *)&#10;(wss, *, *)&#10;(*, localhost, *)&#10;(*, 127/8, *)&#10;(*, ::1/128, *)&#10;(file, *, &#8212;)</span><br></pre></td></tr></table></figure>
<h3 id="支持的加密算法">支持的加密算法</h3><p>##</p>
<h2 id="参考资料">参考资料</h2><ol>
<li><p>W3C Web Cryptography API 规范<br><a href="http://www.w3.org/TR/WebCryptoAPI/" target="_blank" rel="external">http://www.w3.org/TR/WebCryptoAPI/</a></p>
</li>
<li><p>浏览器支持情况<br><a href="http://caniuse.com/#feat=cryptography" target="_blank" rel="external">http://caniuse.com/#feat=cryptography</a></p>
</li>
<li><p><a href="http://qnimate.com/post-series/web-cryptography-api-tutorial/" target="_blank" rel="external">http://qnimate.com/post-series/web-cryptography-api-tutorial/</a></p>
</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>Web加密API提供了执行像散列, 对称 &amp; 非对称加密, 生成 &amp; 校验数字签名等操作的Javascript接口.</p>
<p>本文将介绍加密基础和<a href="http://www.w3.org/TR/WebCryptoAPI" target="_]]>
    </summary>
    
      <category term="Web Cryptography API" scheme="http://developerworks.github.io/tags/Web-Cryptography-API/"/>
    
      <category term="HTML5" scheme="http://developerworks.github.io/categories/HTML5/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[HTML5获取电池状态]]></title>
    <link href="http://developerworks.github.io/2015/05/17/html5-battery-status/"/>
    <id>http://developerworks.github.io/2015/05/17/html5-battery-status/</id>
    <published>2015-05-17T10:00:35.000Z</published>
    <updated>2015-05-18T05:09:22.000Z</updated>
    <content type="html"><![CDATA[<p>W3C电池状态接口定义</p>
<p><img src="/assets/html5/battery-status.png" alt="电池状态接口"></p>
<p>示例</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">title</span>&gt;</span>电池状态API示例<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript"></span><br><span class="line">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">updateBatteryStatus</span>(<span class="params">battery</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">document</span>.querySelector(<span class="string">'#charging'</span>).textContent = battery.charging ? <span class="string">'正在使用交流电'</span> : <span class="string">'正在使用电池'</span>;</span><br><span class="line">        <span class="built_in">document</span>.querySelector(<span class="string">'#level'</span>).textContent = battery.level;</span><br><span class="line">        <span class="built_in">document</span>.querySelector(<span class="string">'#dischargingTime'</span>).textContent = battery.dischargingTime / <span class="number">60</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      navigator.getBattery().then(<span class="function"><span class="keyword">function</span> (<span class="params">battery</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// Update the battery status initially when the promise resolves ...</span></span><br><span class="line">        updateBatteryStatus(battery);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// .. and for any subsequent updates.</span></span><br><span class="line">        battery.onchargingchange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          updateBatteryStatus(battery);</span><br><span class="line">        &#125;;</span><br><span class="line">        battery.onlevelchange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          updateBatteryStatus(battery);</span><br><span class="line">        &#125;;</span><br><span class="line">        battery.ondischargingtimechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          updateBatteryStatus(battery);</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">  </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"charging"</span>&gt;</span>(charging state unknown)<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"level"</span>&gt;</span>(battery level unknown)<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"dischargingTime"</span>&gt;</span>(discharging time unknown)<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="参考资料">参考资料</h2><ol>
<li><p>电池状态W3C规范<br><a href="http://www.w3.org/TR/battery-status/" target="_blank" rel="external">http://www.w3.org/TR/battery-status/</a></p>
</li>
<li><p>新的 JavaScript Battery API<br><a href="http://cssha.com/battery/" target="_blank" rel="external">http://cssha.com/battery/</a></p>
</li>
<li><p>BatteryManager<br><a href="https://developer.mozilla.org/en-US/docs/Web/API/BatteryManager" target="_blank" rel="external">https://developer.mozilla.org/en-US/docs/Web/API/BatteryManager</a></p>
</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>W3C电池状态接口定义</p>
<p><img src="/assets/html5/battery-status.png" alt="电池状态接口"></p>
<p>示例</p>
<figure class="highlight html"><table><tr><td ]]>
    </summary>
    
      <category term="Battery Status" scheme="http://developerworks.github.io/tags/Battery-Status/"/>
    
      <category term="HTML5" scheme="http://developerworks.github.io/categories/HTML5/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用Ejabberd消息归档模块]]></title>
    <link href="http://developerworks.github.io/2015/05/10/ejabberd-mam-module-how-to-use/"/>
    <id>http://developerworks.github.io/2015/05/10/ejabberd-mam-module-how-to-use/</id>
    <published>2015-05-10T11:49:56.000Z</published>
    <updated>2015-05-10T13:59:54.000Z</updated>
    <content type="html"><![CDATA[<p>这篇文章阐述了如何使用Ejabberd提供的第三方消息归档模块</p>
<h2 id="前置阅读">前置阅读</h2><p>15.03在加载外部模块时有个BUG:<br><a href="https://github.com/processone/ejabberd/commit/8b23727cc6db571b9d1dcc6119e39a602fe37279" target="_blank" rel="external">https://github.com/processone/ejabberd/commit/8b23727cc6db571b9d1dcc6119e39a602fe37279</a></p>
<p>所以, 请使用最新的15.04版本的Ejabberd</p>
<p>继续下面的步骤之前, 请先阅读<a href="http://developerworks.github.io/2015/03/17/ejabberd-easy-installer-and-structure-for-ejabberd-contributed-modules/">如何安装模块</a></p>
<h2 id="安装模块">安装模块</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ejabberdctl modules_update_specs&#10;ejabberdctl modules_available&#10;ejabberdctl module_install mod_mam</span><br></pre></td></tr></table></figure>
<h2 id="重新编译">重新编译</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure>
<h2 id="修改配置文件">修改配置文件</h2><p>配置文件有两个地方需要修改</p>
<ul>
<li>增加<code>mod_mam</code>模块配置</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mod_mam:&#10;  access_max_user_messages: access_max_user_messages&#10;  default_page_size: 25&#10;  max_page_size: 100&#10;  request_activates_archiving: true&#10;  iqdisc: parallel</span><br></pre></td></tr></table></figure>
<p>配置说明,请参考模块的<a href="https://github.com/processone/ejabberd-contrib/tree/master/mod_mam" target="_blank" rel="external">README</a>文件</p>
<ul>
<li>修改<code>mod_roster: {}</code> 为</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mod_roster:&#10;  versioning: true</span><br></pre></td></tr></table></figure>
<p>最后, 重启Ejabberd服务器</p>
<h2 id="服务功能查询">服务功能查询</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">## IQ-get 请求</span><br><span class="line"><span class="tag">&lt;<span class="title">iq</span> <span class="attribute">type</span>=<span class="value">'get'</span></span><br><span class="line">    <span class="attribute">id</span>=<span class="value">'id-1431259882548'</span></span><br><span class="line">    <span class="attribute">to</span>=<span class="value">'x.hezhiqiang.info'</span></span><br><span class="line">    <span class="attribute">from</span>=<span class="value">'root@x.hezhiqiang.info'</span></span><br><span class="line">    <span class="attribute">xml:lang</span>=<span class="value">'zh'</span></span><br><span class="line">    <span class="attribute">xmlns</span>=<span class="value">'jabber:client'</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">query</span> <span class="attribute">xmlns</span>=<span class="value">'http://jabber.org/protocol/disco#info'</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">iq</span>&gt;</span></span><br><span class="line"></span><br><span class="line"># IQ-result 响应</span><br><span class="line"><span class="tag">&lt;<span class="title">iq</span> <span class="attribute">from</span>=<span class="value">'x.hezhiqiang.info'</span></span><br><span class="line">    <span class="attribute">to</span>=<span class="value">'root@x.hezhiqiang.info/24790037601431259873977465'</span></span><br><span class="line">    <span class="attribute">id</span>=<span class="value">'id-1431259882548'</span></span><br><span class="line">    <span class="attribute">type</span>=<span class="value">'result'</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">query</span> <span class="attribute">xmlns</span>=<span class="value">'http://jabber.org/protocol/disco#info'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">identity</span> <span class="attribute">category</span>=<span class="value">'pubsub'</span> <span class="attribute">type</span>=<span class="value">'pep'</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">identity</span> <span class="attribute">category</span>=<span class="value">'server'</span> <span class="attribute">type</span>=<span class="value">'im'</span> <span class="attribute">name</span>=<span class="value">'ejabberd'</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">x</span> <span class="attribute">xmlns</span>=<span class="value">'jabber:x:data'</span> <span class="attribute">type</span>=<span class="value">'result'</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">field</span> <span class="attribute">var</span>=<span class="value">'FORM_TYPE'</span> <span class="attribute">type</span>=<span class="value">'hidden'</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">value</span>&gt;</span>http://jabber.org/network/serverinfo<span class="tag">&lt;/<span class="title">value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="title">field</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">x</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="title">feature</span> <span class="attribute">var</span>=<span class="value">'urn:xmpp:mam:0'</span>/&gt;</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="tag">&lt;/<span class="title">query</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">iq</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>你会看到, 多了一个<code>&lt;feature var=&#39;urn:xmpp:mam:0&#39;/&gt;</code></p>
<p>注意: 目前MAM模块暂时支持Mnesia数据库作为后端存储</p>
<h2 id="参考资料">参考资料</h2><ol>
<li><a href="http://www.lebsanft.org/?p=537" target="_blank" rel="external">http://www.lebsanft.org/?p=537</a></li>
<li><a href="https://github.com/processone/ejabberd-contrib/tree/master/mod_mam" target="_blank" rel="external">https://github.com/processone/ejabberd-contrib/tree/master/mod_mam</a></li>
<li><a href="http://xmpp.org/extensions/xep-0279.html" target="_blank" rel="external">http://xmpp.org/extensions/xep-0279.html</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>这篇文章阐述了如何使用Ejabberd提供的第三方消息归档模块</p>
<h2 id="前置阅读">前置阅读</h2><p>15.03在加载外部模块时有个BUG:<br><a href="https://github.com/processone/ejabberd/comm]]>
    </summary>
    
      <category term="XEP" scheme="http://developerworks.github.io/tags/XEP/"/>
    
      <category term="Ejabberd" scheme="http://developerworks.github.io/categories/Ejabberd/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[服务器IP检查]]></title>
    <link href="http://developerworks.github.io/2015/05/07/xmpp-xep-0279-server-ip-check/"/>
    <id>http://developerworks.github.io/2015/05/07/xmpp-xep-0279-server-ip-check/</id>
    <published>2015-05-07T04:53:31.000Z</published>
    <updated>2015-05-10T10:49:13.000Z</updated>
    <content type="html"><![CDATA[<p>该规范定义了一个XMPP扩展, 让客户端能够发现其自己的外部IP地址.</p>
<p>Ejabberd实现模块: <code>mod_sic</code></p>
<p>首先客户端发送一个<code>IQ-get</code>给服务器:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#60;iq type=&#39;get&#39;&#10;    from=&#39;root@x.hezhiqiang.info&#39;&#10;    id=&#39;id-1431053085377&#39;&#10;    xmlns=&#39;jabber:client&#39;&#62;&#10;  &#60;address xmlns=&#39;urn:xmpp:sic:0&#39;/&#62;&#10;&#60;/iq&#62;</span><br></pre></td></tr></table></figure>
<p>服务器端响应一个<code>IQ-result</code>XML片段, 包含一个<code>&lt;address&gt;</code>元素, 其中包含客户端的外部IP地址<code>&lt;ip&gt;</code>, 以及一个可选的<code>&lt;port&gt;</code>元素表示客户端外部IP所对应的端口</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#60;iq from=&#39;root@x.hezhiqiang.info&#39;&#10;    to=&#39;root@x.hezhiqiang.info/1964144757143129898889436&#39;&#10;    id=&#39;id-1431053085377&#39;&#10;    type=&#39;result&#39;&#62;&#10;  &#60;address xmlns=&#39;urn:xmpp:sic:0&#39;&#62;192.168.8.104&#60;/address&#62;&#10;&#60;/iq&#62;</span><br></pre></td></tr></table></figure>
<p>判断XMPP服务器是否支持该协议扩展</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#60;!--&#35831;&#27714;--&#62;&#10;&#60;iq type=&#39;get&#39; id=&#39;id-1431052837499&#39;&#10;    to=&#39;x.hezhiqiang.info&#39;&#10;    from=&#39;root@x.hezhiqiang.info&#39;&#10;    xml:lang=&#39;zh&#39;&#10;    xmlns=&#39;jabber:client&#39;&#62;&#10;  &#60;query xmlns=&#39;http://jabber.org/protocol/disco#info&#39;/&#62;&#10;&#60;/iq&#62;&#10;&#60;!--&#21709;&#24212;--&#62;&#10;&#60;iq from=&#39;x.hezhiqiang.info&#39;&#10;    to=&#39;root@x.hezhiqiang.info/1964144757143129898889436&#39;&#10;    id=&#39;id-1431052837499&#39;&#10;    type=&#39;result&#39;&#62;&#10;  &#60;query xmlns=&#39;http://jabber.org/protocol/disco#info&#39;&#62;&#10;    &#60;identity category=&#39;pubsub&#39; type=&#39;pep&#39;/&#62;&#10;    &#60;identity category=&#39;server&#39; type=&#39;im&#39; name=&#39;ejabberd&#39;/&#62;&#10;    &#60;x xmlns=&#39;jabber:x:data&#39; type=&#39;result&#39;&#62;&#10;      &#60;field var=&#39;FORM_TYPE&#39; type=&#39;hidden&#39;&#62;&#10;        &#60;value&#62;http://jabber.org/network/serverinfo&#60;/value&#62;&#10;      &#60;/field&#62;&#10;    &#60;/x&#62;&#10;    &#60;feature var=&#39;http://jabber.org/protocol/commands&#39;/&#62;&#10;    &#60;feature var=&#39;http://jabber.org/protocol/disco#info&#39;/&#62;&#10;    &#60;feature var=&#39;http://jabber.org/protocol/disco#items&#39;/&#62;&#10;    &#60;feature var=&#39;http://jabber.org/protocol/pubsub&#39;/&#62;&#10;    &#60;feature var=&#39;http://jabber.org/protocol/pubsub#access-authorize&#39;/&#62;&#10;    &#60;feature var=&#39;http://jabber.org/protocol/pubsub#access-open&#39;/&#62;&#10;    &#60;feature var=&#39;http://jabber.org/protocol/pubsub#access-presence&#39;/&#62;&#10;    &#60;feature var=&#39;http://jabber.org/protocol/pubsub#access-whitelist&#39;/&#62;&#10;    &#60;feature var=&#39;http://jabber.org/protocol/pubsub#auto-create&#39;/&#62;&#10;    &#60;feature var=&#39;http://jabber.org/protocol/pubsub#auto-subscribe&#39;/&#62;&#10;    &#60;feature var=&#39;http://jabber.org/protocol/pubsub#collections&#39;/&#62;&#10;    &#60;feature var=&#39;http://jabber.org/protocol/pubsub#config-node&#39;/&#62;&#10;    &#60;feature var=&#39;http://jabber.org/protocol/pubsub#create-and-configure&#39;/&#62;&#10;    &#60;feature var=&#39;http://jabber.org/protocol/pubsub#create-nodes&#39;/&#62;&#10;    &#60;feature var=&#39;http://jabber.org/protocol/pubsub#delete-items&#39;/&#62;&#10;    &#60;feature var=&#39;http://jabber.org/protocol/pubsub#delete-nodes&#39;/&#62;&#10;    &#60;feature var=&#39;http://jabber.org/protocol/pubsub#filtered-notifications&#39;/&#62;&#10;    &#60;feature var=&#39;http://jabber.org/protocol/pubsub#get-pending&#39;/&#62;&#10;    &#60;feature var=&#39;http://jabber.org/protocol/pubsub#instant-nodes&#39;/&#62;&#10;    &#60;feature var=&#39;http://jabber.org/protocol/pubsub#item-ids&#39;/&#62;&#10;    &#60;feature var=&#39;http://jabber.org/protocol/pubsub#last-published&#39;/&#62;&#10;    &#60;feature var=&#39;http://jabber.org/protocol/pubsub#manage-subscriptions&#39;/&#62;&#10;    &#60;feature var=&#39;http://jabber.org/protocol/pubsub#member-affiliation&#39;/&#62;&#10;    &#60;feature var=&#39;http://jabber.org/protocol/pubsub#modify-affiliations&#39;/&#62;&#10;    &#60;feature var=&#39;http://jabber.org/protocol/pubsub#multi-subscribe&#39;/&#62;&#10;    &#60;feature var=&#39;http://jabber.org/protocol/pubsub#outcast-affiliation&#39;/&#62;&#10;    &#60;feature var=&#39;http://jabber.org/protocol/pubsub#persistent-items&#39;/&#62;&#10;    &#60;feature var=&#39;http://jabber.org/protocol/pubsub#presence-notifications&#39;/&#62;&#10;    &#60;feature var=&#39;http://jabber.org/protocol/pubsub#presence-subscribe&#39;/&#62;&#10;    &#60;feature var=&#39;http://jabber.org/protocol/pubsub#publish&#39;/&#62;&#10;    &#60;feature var=&#39;http://jabber.org/protocol/pubsub#publish-only-affiliation&#39;/&#62;&#10;    &#60;feature var=&#39;http://jabber.org/protocol/pubsub#publisher-affiliation&#39;/&#62;&#10;    &#60;feature var=&#39;http://jabber.org/protocol/pubsub#purge-nodes&#39;/&#62;&#10;    &#60;feature var=&#39;http://jabber.org/protocol/pubsub#retract-items&#39;/&#62;&#10;    &#60;feature var=&#39;http://jabber.org/protocol/pubsub#retrieve-affiliations&#39;/&#62;&#10;    &#60;feature var=&#39;http://jabber.org/protocol/pubsub#retrieve-default&#39;/&#62;&#10;    &#60;feature var=&#39;http://jabber.org/protocol/pubsub#retrieve-items&#39;/&#62;&#10;    &#60;feature var=&#39;http://jabber.org/protocol/pubsub#retrieve-subscriptions&#39;/&#62;&#10;    &#60;feature var=&#39;http://jabber.org/protocol/pubsub#shim&#39;/&#62;&#10;    &#60;feature var=&#39;http://jabber.org/protocol/pubsub#subscribe&#39;/&#62;&#10;    &#60;feature var=&#39;http://jabber.org/protocol/pubsub#subscription-notifications&#39;/&#62;&#10;    &#60;feature var=&#39;http://jabber.org/protocol/pubsub#subscription-options&#39;/&#62;&#10;    &#60;feature var=&#39;http://jabber.org/protocol/stats&#39;/&#62;&#10;    &#60;feature var=&#39;iq&#39;/&#62;&#10;    &#60;feature var=&#39;jabber:iq:last&#39;/&#62;&#10;    &#60;feature var=&#39;jabber:iq:privacy&#39;/&#62;&#10;    &#60;feature var=&#39;jabber:iq:private&#39;/&#62;&#10;    &#60;feature var=&#39;jabber:iq:register&#39;/&#62;&#10;    &#60;feature var=&#39;jabber:iq:roster&#39;/&#62;&#10;    &#60;feature var=&#39;jabber:iq:time&#39;/&#62;&#10;    &#60;feature var=&#39;jabber:iq:version&#39;/&#62;&#10;    &#60;feature var=&#39;msgoffline&#39;/&#62;&#10;    &#60;feature var=&#39;presence&#39;/&#62;&#10;    &#60;feature var=&#39;urn:xmpp:blocking&#39;/&#62;&#10;    &#60;feature var=&#39;urn:xmpp:carbons:1&#39;/&#62;&#10;    &#60;feature var=&#39;urn:xmpp:carbons:2&#39;/&#62;&#10;    &#60;feature var=&#39;urn:xmpp:ping&#39;/&#62;&#10;    &#60;feature var=&#39;urn:xmpp:sic:0&#39;/&#62;&#10;    &#60;feature var=&#39;urn:xmpp:time&#39;/&#62;&#10;    &#60;feature var=&#39;vcard-temp&#39;/&#62;&#10;  &#60;/query&#62;&#10;&#60;/iq&#62;</span><br></pre></td></tr></table></figure>
<p>上述结果<code>79</code>行包含一个<code>&lt;feature var=&#39;urn:xmpp:sic:0&#39;/&gt;</code>, 表示服务器支持该协议扩展, 我们需要解析上述服务器响应来判断是否包含<code>&lt;feature var=&#39;urn:xmpp:sic:0&#39;/&gt;</code>元素,如果包含标识服务器支持. 否则不支持.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>该规范定义了一个XMPP扩展, 让客户端能够发现其自己的外部IP地址.</p>
<p>Ejabberd实现模块: <code>mod_sic</code></p>
<p>首先客户端发送一个<code>IQ-get</code>给服务器:</p>
<figure class=]]>
    </summary>
    
      <category term="XEP" scheme="http://developerworks.github.io/tags/XEP/"/>
    
      <category term="XMPP" scheme="http://developerworks.github.io/categories/XMPP/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Thrift: The Missing Guide]]></title>
    <link href="http://developerworks.github.io/2015/03/23/thrift-messing-guide/"/>
    <id>http://developerworks.github.io/2015/03/23/thrift-messing-guide/</id>
    <published>2015-03-23T05:08:39.000Z</published>
    <updated>2015-03-23T05:09:27.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>Thrift is a software framework for scalable cross-language services development. It combines a software stack with a code generation engine to build services that work efficiently and seamlessly between C++, Java, Python, PHP, Ruby, Erlang, Perl, Haskell, C#, Cocoa, JavaScript, Node.js, Smalltalk, and OCaml.</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>Thrift is a software framework for scalable cross-language services development. It combines a software stack with a code ge]]>
    </summary>
    
      <category term="Thrift" scheme="http://developerworks.github.io/tags/Thrift/"/>
    
      <category term="Thrift" scheme="http://developerworks.github.io/categories/Thrift/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[针对Ejabberd的操作系统C1000K优化]]></title>
    <link href="http://developerworks.github.io/2015/03/18/ejabberd-os-optimizations/"/>
    <id>http://developerworks.github.io/2015/03/18/ejabberd-os-optimizations/</id>
    <published>2015-03-18T12:06:46.000Z</published>
    <updated>2015-03-18T17:18:07.000Z</updated>
    <content type="html"><![CDATA[<p>本文基于Ubuntu Server 14.04进行优化, 不同的Linux/Unix系统有不同的细节.</p>
<p>查看系统当前支持的最大打开文件数:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@ci:~# cat /proc/sys/fs/nr_open&#10;1048576</span><br></pre></td></tr></table></figure>
<p>查看硬性限制和软性限制</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ulimit -Hn&#10;ulimit -Sn</span><br></pre></td></tr></table></figure>
<p>如果该值小于1000K, 请增大如下设置, 否则达不到100W并发连接.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.file-max = 1024000&#10;net.ipv4.ip_conntrack_max = 1024000&#10;net.ipv4.netfilter.ip_conntrack_max = 1024000</span><br></pre></td></tr></table></figure>
<p>所有进程打开的文件描述符数不能超过<code>/proc/sys/fs/file-max</code><br>单个进程打开的文件描述符数不能超过user limit中nofile的soft limit<br>nofile的soft limit不能超过其hard limit<br>nofile的hard limit不能超过<code>/proc/sys/fs/nr_open</code></p>
<p>查看服务器TCP状态:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -n | awk &#39;/^tcp/ &#123;++S[$NF]&#125; END &#123;for(a in S) print a, S[a]&#125;&#39;</span><br></pre></td></tr></table></figure>
<h2 id="参考资料">参考资料</h2><ol>
<li><a href="http://www.ideawu.net/blog/archives/740.html" target="_blank" rel="external">构建C1000K的服务器(1) – 基础</a></li>
<li><a href="http://www.cyberciti.biz/faq/linux-increase-the-maximum-number-of-open-files" target="_blank" rel="external">Linux Increase The Maximum Number Of Open Files / File Descriptors (FD)</a></li>
<li><a href="http://lansgg.blog.51cto.com/5675165/1576200" target="_blank" rel="external">Linux系统优化加固</a></li>
</ol>
<p>fs.file-max=65535000</p>
<p>net.nf_conntrack_max = 1000000</p>
<p>net.core.rmem_max = 16777216<br>net.core.wmem_max = 16777216</p>
<p>net.core.netdev_max_backlog = 3000000</p>
<p>net.ipv4.tcp_tw_recycle = 0<br>net.ipv4.tcp_tw_reuse = 1<br>net.ipv4.tcp_timestamps = 1<br>net.ipv4.tcp_max_syn_backlog = 65535<br>net.ipv4.tcp_fin_timeout = 30<br>net.ipv4.tcp_keepalive_time = 1800<br>net.ipv4.tcp_rmem = 4096 4096 16777216<br>net.ipv4.tcp_wmem = 4096 4096 16777216</p>
<p>net.ipv4.ip_local_port_range = 1024 65000<br>net.ipv4.tcp_rmem = 4096 87380 16777216<br>net.ipv4.tcp_wmem = 4096 65536 16777216</p>
<p>#net.ipv4.tcp_congestion_control = HTCP</p>
<p>#net.ipv4.tcp_mtu_probing = 1</p>
<p>net.netfilter.nf_conntrack_max = 1000000<br>net.netfilter.nf_conntrack_buckets = 32768</p>
<p>#net.netfilter.nf_conntrack_tcp_timeout_established = 432000<br>net.netfilter.nf_conntrack_tcp_timeout_established = 3600<br>net.netfilter.nf_conntrack_tcp_timeout_time_wait = 120<br>net.netfilter.nf_conntrack_tcp_timeout_close_wait = 60<br>net.netfilter.nf_conntrack_tcp_timeout_fin_wait = 120</p>
<p>解决 nf_conntrack: table full, dropping packet 的几种思路<br><a href="http://jaseywang.me/2012/08/16/%E8%A7%A3%E5%86%B3-nf_conntrack-table-full-dropping-packet-%E7%9A%84%E5%87%A0%E7%A7%8D%E6%80%9D%E8%B7%AF/" target="_blank" rel="external">http://jaseywang.me/2012/08/16/%E8%A7%A3%E5%86%B3-nf_conntrack-table-full-dropping-packet-%E7%9A%84%E5%87%A0%E7%A7%8D%E6%80%9D%E8%B7%AF/</a></p>
<p>关于Erlang的一些限制<br><a href="http://youthyblog.com/2014/08/05/erlang%E6%9C%89%E5%85%B3%E6%95%88%E7%8E%87%E7%9A%84%E4%B8%80%E4%BA%9Blimit/" target="_blank" rel="external">http://youthyblog.com/2014/08/05/erlang%E6%9C%89%E5%85%B3%E6%95%88%E7%8E%87%E7%9A%84%E4%B8%80%E4%BA%9Blimit/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>本文基于Ubuntu Server 14.04进行优化, 不同的Linux/Unix系统有不同的细节.</p>
<p>查看系统当前支持的最大打开文件数:</p>
<figure class="highlight plain"><table><tr><td class="gu]]>
    </summary>
    
      <category term="Optimization" scheme="http://developerworks.github.io/tags/Optimization/"/>
    
      <category term="Ejabberd" scheme="http://developerworks.github.io/categories/Ejabberd/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[AngularJS中的If..Else语句]]></title>
    <link href="http://developerworks.github.io/2015/03/18/angular-if-else-statement-in-template/"/>
    <id>http://developerworks.github.io/2015/03/18/angular-if-else-statement-in-template/</id>
    <published>2015-03-18T06:21:20.000Z</published>
    <updated>2015-03-18T06:26:49.000Z</updated>
    <content type="html"><![CDATA[<ol>
<li><a href="http://docs.angularjs.org/api/ng.directive%3angSwitch" target="_blank" rel="external">ng-switch</a> directive:</li>
</ol>
<p>can be used something like the following.</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">ng-switch</span> <span class="attribute">on</span>=<span class="value">"video"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">ng-switch-when</span>=<span class="value">"video.large"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- code to render a large video block--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">ng-switch-default</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- code to render the regular video block --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol>
<li><a href="http://docs.angularjs.org/api/ng.directive%3angHide" target="_blank" rel="external">ng-hide</a> / <a href="http://docs.angularjs.org/api/ng.directive%3angShow" target="_blank" rel="external">ng-show</a> directives</li>
</ol>
<p>Alternatively, you might also use <code>ng-show/ng-hide</code> but using this will actually render both a large video and a small video element and then hide the one that meets the <code>ng-hide</code> condition and shows the one that meets <code>ng-show</code> condition.</p>
<p>So on each page you’ll actually be rendering two different elements.</p>
<ol>
<li>Another option to consider is <a href="http://docs.angularjs.org/api/ng.directive%3angClass" target="_blank" rel="external">ng-class</a> directive.</li>
</ol>
<p>This can be used as follows.</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">ng-class</span>=<span class="value">"&#123;large-video: video.large&#125;"</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- video block goes here --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>The above basically will add a <code>large-video</code> css class to the div element if <code>video.large</code> is truthy.</p>
<p>UPDATE: <a href="http://code.angularjs.org/1.1.5/docs/" target="_blank" rel="external">Angular 1.1.5</a> introduced the <a href="http://docs.angularjs.org/api/ng.directive%3angIf" target="_blank" rel="external">ngIf directive</a></p>
<ol>
<li>ng-if directive:</li>
</ol>
<p>In the versions above <code>1.1.5</code> you can use the <code>ng-if</code> directive. This would remove the element if the expression provided returns <code>false</code> and re-inserts the <code>element</code> in the DOM if the expression returns <code>true</code>. Can be used as follows.</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">ng-if</span>=<span class="value">"video == video.large"</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- code to render a large video block--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">ng-if</span>=<span class="value">"video != video.large"</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- code to render the regular video block --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="参考资料">参考资料</h2><ol>
<li><a href="http://stackoverflow.com/questions/15810278/if-else-statement-in-angularjs-templates" target="_blank" rel="external">http://stackoverflow.com/questions/15810278/if-else-statement-in-angularjs-templates</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<ol>
<li><a href="http://docs.angularjs.org/api/ng.directive%3angSwitch" target="_blank" rel="external">ng-switch</a> directive:</li>
</ol>
]]>
    </summary>
    
      <category term="angular" scheme="http://developerworks.github.io/tags/angular/"/>
    
      <category term="Javascript" scheme="http://developerworks.github.io/categories/Javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Nodejs应用程序持续部署]]></title>
    <link href="http://developerworks.github.io/2015/03/18/continuous-deployment-of-node-js-applications/"/>
    <id>http://developerworks.github.io/2015/03/18/continuous-deployment-of-node-js-applications/</id>
    <published>2015-03-18T06:18:01.000Z</published>
    <updated>2015-03-18T06:20:12.000Z</updated>
    <content type="html"><![CDATA[<h2 id="文章">文章</h2><ol>
<li><p>Continuous Deployment of Node.js Applications<br><a href="http://blog.risingstack.com/continuous-deployment-of-node-js-applications" target="_blank" rel="external">http://blog.risingstack.com/continuous-deployment-of-node-js-applications</a></p>
</li>
<li><p>Best Practices for Deploying Node.js in Production<br><a href="https://strongloop.com/strongblog/node-js-deploy-production-best-practice" target="_blank" rel="external">https://strongloop.com/strongblog/node-js-deploy-production-best-practice</a></p>
</li>
</ol>
<h2 id="持续部署工具">持续部署工具</h2><ol>
<li>Strider<br><a href="http://stridercd.com" target="_blank" rel="external">http://stridercd.com</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="文章">文章</h2><ol>
<li><p>Continuous Deployment of Node.js Applications<br><a href="http://blog.risingstack.com/continuous-deployment-o]]>
    </summary>
    
      <category term="Node.js" scheme="http://developerworks.github.io/tags/Node-js/"/>
    
      <category term="Continuous Deployment" scheme="http://developerworks.github.io/categories/Continuous-Deployment/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Erlang Pooler]]></title>
    <link href="http://developerworks.github.io/2015/03/17/erlang-pooler/"/>
    <id>http://developerworks.github.io/2015/03/17/erlang-pooler/</id>
    <published>2015-03-17T15:51:53.000Z</published>
    <updated>2015-03-17T16:06:05.000Z</updated>
    <content type="html"><![CDATA[<h2 id="参考资料">参考资料</h2><ol>
<li><a href="http://erlangcentral.org/the-pooler-story-how-i-learned-otp-by-writing-a-connection-pool" target="_blank" rel="external">http://erlangcentral.org/the-pooler-story-how-i-learned-otp-by-writing-a-connection-pool</a></li>
<li><a href="https://github.com/bfrog/hottub" target="_blank" rel="external">https://github.com/bfrog/hottub</a></li>
<li><a href="http://sourceforge.net/projects/erlpool/" target="_blank" rel="external">http://sourceforge.net/projects/erlpool/</a></li>
<li><a href="http://www.cnblogs.com/--00/p/4287209.html" target="_blank" rel="external">http://www.cnblogs.com/--00/p/4287209.html</a></li>
<li><a href="http://www.cnblogs.com/--00/p/4281938.html" target="_blank" rel="external">http://www.cnblogs.com/--00/p/4281938.html</a></li>
<li><a href="http://www.cnblogs.com/--00/tag/Erlang/" target="_blank" rel="external">http://www.cnblogs.com/--00/tag/Erlang/</a></li>
<li><a href="http://learnyousomeerlang.com/building-applications-with-otp" target="_blank" rel="external">http://learnyousomeerlang.com/building-applications-with-otp</a></li>
<li><a href="http://www.lshift.net/blog/2010/03/29/on-the-limits-of-concurrency-worker-pools-in-erlang/" target="_blank" rel="external">http://www.lshift.net/blog/2010/03/29/on-the-limits-of-concurrency-worker-pools-in-erlang/</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="参考资料">参考资料</h2><ol>
<li><a href="http://erlangcentral.org/the-pooler-story-how-i-learned-otp-by-writing-a-connection-pool" target="_]]>
    </summary>
    
      <category term="Pool" scheme="http://developerworks.github.io/tags/Pool/"/>
    
      <category term="Erlang" scheme="http://developerworks.github.io/categories/Erlang/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Ejabberd模块安装工具]]></title>
    <link href="http://developerworks.github.io/2015/03/17/ejabberd-easy-installer-and-structure-for-ejabberd-contributed-modules/"/>
    <id>http://developerworks.github.io/2015/03/17/ejabberd-easy-installer-and-structure-for-ejabberd-contributed-modules/</id>
    <published>2015-03-16T16:23:38.000Z</published>
    <updated>2015-03-17T05:27:03.000Z</updated>
    <content type="html"><![CDATA[<p>从Ejabberd版本<a href="https://github.com/processone/ejabberd/commit/aa1250a3ddf952119982970acc8a743dda6c1041" target="_blank" rel="external">15.02.77 (aa1250a)</a>起,支持通过<code>ejabberdctl</code>命令行工具安装<a href="https://github.com/processone/ejabberd-contrib" target="_blank" rel="external">第三方模块</a></p>
<ul>
<li>如果你之前从源码便已过Ejabberd,并且是从源码安装的, 请首先重新执行如下命令:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./autogen.sh&#10;./configure --enable-mysql \&#10;    --enable-iconv \&#10;    --enable-elixir \&#10;    --enable-tools \&#10;    --enable-nif \&#10;    --enable-odbc \&#10;    --enable-zlib \&#10;    --enable-json&#10;make&#10;make install</span><br></pre></td></tr></table></figure>
<ul>
<li>更新模块列表</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ejabberdctl modules_update_specs</span><br></pre></td></tr></table></figure>
<ul>
<li>列出可用的模块</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@xmpp:~# ejabberdctl modules_available&#10;atom_pubsub         Provides access to all PEP nodes via an AtomPub interface&#10;ejabberd_auth_http  Authentication via HTTP request&#10;ircd                IRC server frontend to ejabberd&#10;mod_admin_extra     Additional ejabberd commands&#10;mod_archive         Supports almost all the XEP-0136 version 0.6 except otr&#10;mod_cron            Execute scheduled commands&#10;mod_log_chat        Logging chat messages in text files&#10;mod_logsession      Log session connections to file&#10;mod_logxml          Log XMPP packets to XML file&#10;mod_mam&#9;Message     Archive Management (XEP-0313)&#10;mod_message_log     Log one line per message transmission in text file&#10;mod_muc_admin       Administrative features for MUC&#10;mod_muc_log_http    Serve MUC logs on the web&#10;mod_multicast       Extended Stanza Addressing (XEP-0033) support&#10;mod_openid          Transform the Jabber Server in an openid provider&#10;mod_post_log        Logs messages to an HTTP API&#10;mod_profile         User Profile (XEP-0154) in Mnesia table&#10;mod_rest            HTTP interface to POST stanzas into ejabberd&#10;mod_s2s_log         Log all s2s connections in a file&#10;mod_shcommands      Execute shell commands&#10;mod_statsdx         Calculates and gathers statistics actively&#10;mod_webpresence     Publish user presence information in the web</span><br></pre></td></tr></table></figure>
<ul>
<li>安装一个模块</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ejabberdctl module_install mod_cron</span><br></pre></td></tr></table></figure>
<p>该命令从<a href="https://github.com/processone/ejabberd-contrib" target="_blank" rel="external">ejabberd-contrib</a>仓库安装<code>mod_cron</code>模块</p>
<p><code>$HOME/.ejabberd-modules/mod_cron/conf/mod_cron.yml</code></p>
<h2 id="原文">原文</h2><p><a href="https://blog.process-one.net/easy-installer-and-structure-for-ejabberd-contributed-modules" target="_blank" rel="external">https://blog.process-one.net/easy-installer-and-structure-for-ejabberd-contributed-modules</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>从Ejabberd版本<a href="https://github.com/processone/ejabberd/commit/aa1250a3ddf952119982970acc8a743dda6c1041" target="_blank" rel="external]]>
    </summary>
    
      <category term="Modules" scheme="http://developerworks.github.io/tags/Modules/"/>
    
      <category term="Ejabberd" scheme="http://developerworks.github.io/categories/Ejabberd/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Ejabberd Howto 20150312 <TODO LIST>]]></title>
    <link href="http://developerworks.github.io/2015/03/13/ejabberd-howto-20150312/"/>
    <id>http://developerworks.github.io/2015/03/13/ejabberd-howto-20150312/</id>
    <published>2015-03-12T16:17:23.000Z</published>
    <updated>2015-03-12T19:24:21.000Z</updated>
    <content type="html"><![CDATA[<ul>
<li><p>如何使用15.02中新增的Websocket?</p>
<p>  <a href="https://github.com/processone/ejabberd/search?utf8=%E2%9C%93&amp;q=websocket" target="_blank" rel="external">https://github.com/processone/ejabberd/search?utf8=%E2%9C%93&amp;q=websocket</a></p>
</li>
<li><p>新增的SM(Session Manager)数据库后端有什么用处?</p>
<p>  <a href="https://github.com/processone/ejabberd/commit/72d9b099c6a8c73c691cb45ba9e422d69fb55db8#" target="_blank" rel="external">https://github.com/processone/ejabberd/commit/72d9b099c6a8c73c691cb45ba9e422d69fb55db8#</a></p>
</li>
<li><p>如何使用新增的集群脚本?</p>
<p>  <a href="https://github.com/processone/ejabberd/tree/master/tools" target="_blank" rel="external">https://github.com/processone/ejabberd/tree/master/tools</a></p>
</li>
<li><p>如何配置和使用<a href="https://github.com/processone/ejabberd-contrib" target="_blank" rel="external">ejabberd-modules</a>仓库中的模块?</p>
<p>  <a href="https://github.com/processone/ejabberd/commit/f77622067b80bd0e75400f7f5e4b1ae5f6884e8d" target="_blank" rel="external">https://github.com/processone/ejabberd/commit/f77622067b80bd0e75400f7f5e4b1ae5f6884e8d</a></p>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<ul>
<li><p>如何使用15.02中新增的Websocket?</p>
<p>  <a href="https://github.com/processone/ejabberd/search?utf8=%E2%9C%93&amp;q=websocket" target="]]>
    </summary>
    
      <category term="Howto" scheme="http://developerworks.github.io/tags/Howto/"/>
    
      <category term="Ejabberd" scheme="http://developerworks.github.io/categories/Ejabberd/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Ejabberd 性能调优(草稿)]]></title>
    <link href="http://developerworks.github.io/2015/03/12/ejabberd-performance-turning/"/>
    <id>http://developerworks.github.io/2015/03/12/ejabberd-performance-turning/</id>
    <published>2015-03-12T13:13:41.000Z</published>
    <updated>2015-03-20T19:03:06.000Z</updated>
    <content type="html"><![CDATA[<h2 id="第一阶段">第一阶段</h2><p>目标10W并发连接</p>
<h2 id="进程打开文件数限制">进程打开文件数限制</h2><ol>
<li>编辑 <code>/etc/pam.d/login</code>,取消<code>pam_limits.so</code>的注释</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># Sets up user limits according to /etc/security/limits.conf&#10;# (Replaces the use of /etc/limits in old login)&#10;session    required   pam_limits.so</span><br></pre></td></tr></table></figure>
<ol>
<li><code>/etc/security/limits.conf</code></li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root    soft    nofile  320000&#10;root    hard    nofile  320000</span><br></pre></td></tr></table></figure>
<p>我们在root账户下测试, 如何验证该设置是否生效?</p>
<p>exit 退出shell, 重新登录执行<code>ulimit -a</code>查看<code>open files</code>是否为<code>320000</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@ci:~# ulimit -a&#10;core file size          (blocks, -c) 0&#10;data seg size           (kbytes, -d) unlimited&#10;scheduling priority             (-e) 0&#10;file size               (blocks, -f) unlimited&#10;pending signals                 (-i) 127413&#10;max locked memory       (kbytes, -l) 64&#10;max memory size         (kbytes, -m) unlimited&#10;open files                      (-n) 320000&#10;pipe size            (512 bytes, -p) 8&#10;POSIX message queues     (bytes, -q) 819200&#10;real-time priority              (-r) 0&#10;stack size              (kbytes, -s) 8192&#10;cpu time               (seconds, -t) unlimited&#10;max user processes              (-u) 127413&#10;virtual memory          (kbytes, -v) unlimited&#10;file locks                      (-x) unlimited</span><br></pre></td></tr></table></figure>
<h2 id="启动参数">启动参数</h2><p>Ejabberd的启动参数可以在配置文件<code>/etc/ejabberd/ejabberdctl.cfg</code>中进行调整</p>
<ul>
<li><p><code>ERL_MAX_PORTS</code></p>
<p>  每个到客户端(s2c)和服务器(s2s)的连接消耗一个<code>port</code>, <code>ERL_MAX_PORTS</code>定义了Ejabberd可以支持的并发连接数. 其可以在配置文件<code>/etc/ejabberd/ejabberdctl.cfg</code>中指定, 默认值为<code>32000</code>.</p>
<p>  大并发连接场景下的应用需要增大该参数的值.</p>
</li>
<li><p><code>ERL_PROCESSES</code></p>
<p>  Erlang消耗很多轻量级进程, 如果Ejabberd比较繁忙, 可能会达到进程数上限, 这种情况会导致高延迟. 当消息延迟过高时, 需要判断是否是由于该参数引起的.</p>
</li>
</ul>
<h2 id="内核参数调整">内核参数调整</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net.ipv4.tcp_syncookies = 1&#10;net.ipv4.tcp_tw_reuse = 1&#10;net.ipv4.tcp_tw_recycle = 0&#10;net.ipv4.tcp_timestamps = 1&#10;net.ipv4.tcp_max_syn_backlog = 65535&#10;net.ipv4.tcp_fin_timeout = 30&#10;net.ipv4.tcp_rmem = 4096 4096 16777216&#10;net.ipv4.tcp_wmem = 4096 4096 16777216&#10;net.ipv4.ip_local_port_range = 1025 65000&#10;fs.file-max = 65535000&#10;net.core.rmem_max = 16777216&#10;net.core.wmem_max = 16777216&#10;net.ipv4.tcp_rmem = 4096 87380 16777216&#10;net.ipv4.tcp_wmem = 4096 65536 16777216&#10;net.core.netdev_max_backlog = 30000&#10;net.ipv4.tcp_mtu_probing = 1</span><br></pre></td></tr></table></figure>
<p>内核网络参数<code>net.ipv4.ip_local_port_range</code>指定了本地程序可以打开的端口范围. <code>61000-32768=28232</code>可以最多建立28232个到Ejabberd服务器的连接, 一般比这个数字小, 系统还有其他程序需要占用端口.</p>
<ul>
<li><code>net.ipv4.tcp_tw_recycle = 1</code> 快速回收TCP连接, 避免TIME_WAIT时间过长</li>
</ul>
<p>修改端口范围<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo 1024 65535 &#62; /proc/sys/net/ipv4/ip_local_port_range</span><br></pre></td></tr></table></figure></p>
<h2 id="排查">排查</h2><ul>
<li>查看ulimit</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ulimit -a</span><br></pre></td></tr></table></figure>
<ul>
<li>验证进程的最大可打开文件 <code>Max open files</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@scm:~# cat /proc/18938/limits&#10;Limit                     Soft Limit           Hard Limit           Units&#10;Max cpu time              unlimited            unlimited            seconds&#10;Max file size             unlimited            unlimited            bytes&#10;Max data size             unlimited            unlimited            bytes&#10;Max stack size            8388608              unlimited            bytes&#10;Max core file size        0                    unlimited            bytes&#10;Max resident set          unlimited            unlimited            bytes&#10;Max processes             127460               127460               processes&#10;Max open files            60000                60000                files&#10;Max locked memory         65536                65536                bytes&#10;Max address space         unlimited            unlimited            bytes&#10;Max file locks            unlimited            unlimited            locks&#10;Max pending signals       127460               127460               signals&#10;Max msgqueue size         819200               819200               bytes&#10;Max nice priority         0                    0&#10;Max realtime priority     0                    0&#10;Max realtime timeout      unlimited            unlimited            us</span><br></pre></td></tr></table></figure>
<h2 id="Mnesia表过载">Mnesia表过载</h2><p>编辑配置文件<code>/etc/ejabberd/ejabberdctl.cfg</code>, 设置选项:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERL_OPTIONS=&#34;-mnesia dump_log_write_threshold 50000 -mnesia dc_dump_limit 40&#34;</span><br></pre></td></tr></table></figure>
<p>当前版本的SHELL脚本有BUG, 需要使用<code>\</code>转义, 如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERL_OPTIONS=&#34;-mnesia\ dump_log_write_threshold\ 50000\ -mnesia\ dc_dump_limit\ 40&#34;</span><br></pre></td></tr></table></figure>
<h2 id="Erlang_虚拟机参数">Erlang 虚拟机参数</h2><p><a href="http://www.cnblogs.com/lulu/p/4132278.html" target="_blank" rel="external">http://www.cnblogs.com/lulu/p/4132278.html</a></p>
<ul>
<li>beam 启动参数<ul>
<li><code>+sbt db</code><br>  绑定调度器与CPU的亲缘性</li>
<li><code>+P 2000000</code><br>  进程数限制（合适即可）</li>
<li><code>+K true</code><br>  启用epoll</li>
<li><code>+sbwt none</code><br>  关闭beam 调度器 spinlock，降低CPU</li>
<li><code>+swt low</code><br>  提高调度器唤醒灵敏度，避免长时间运行睡死问题</li>
</ul>
</li>
</ul>
<h2 id="内核参数">内核参数</h2><h3 id="TCP">TCP</h3><p><a href="http://blog.csdn.net/russell_tao/article/details/18711023" target="_blank" rel="external">http://blog.csdn.net/russell_tao/article/details/18711023</a></p>
<h2 id="参考资料">参考资料</h2><ol>
<li><p>文件描述符<br><a href="http://erlangcentral.org/wiki/index.php?title=Introduction_to_Load_Testing_with_Tsung#Max_open_file_descriptor_limit" target="_blank" rel="external">http://erlangcentral.org/wiki/index.php?title=Introduction_to_Load_Testing_with_Tsung#Max_open_file_descriptor_limit</a></p>
</li>
<li><p>虚拟接口<br><a href="http://erlangcentral.org/wiki/index.php?title=Introduction_to_Load_Testing_with_Tsung#Virtual_interfaces" target="_blank" rel="external">http://erlangcentral.org/wiki/index.php?title=Introduction_to_Load_Testing_with_Tsung#Virtual_interfaces</a></p>
</li>
<li><p>Mnesia过载问题<br><a href="http://blog.include.io/archives/106" target="_blank" rel="external">http://blog.include.io/archives/106</a><br><a href="http://www.tuicool.com/articles/rIBbqa" target="_blank" rel="external">http://www.tuicool.com/articles/rIBbqa</a></p>
</li>
<li><p>Tsung 常见问题<br><a href="http://tsung.erlang-projects.org/user_manual/faq.html" target="_blank" rel="external">http://tsung.erlang-projects.org/user_manual/faq.html</a></p>
</li>
<li><p><a href="http://blog.fnil.net/index.php/archives/276/" target="_blank" rel="external">http://blog.fnil.net/index.php/archives/276/</a></p>
</li>
<li><p>幻灯片-安装过程(需要梯子)<br><a href="http://www.slideshare.net/ngocdaothanh/tsung-13985127?related=1" target="_blank" rel="external">http://www.slideshare.net/ngocdaothanh/tsung-13985127?related=1</a></p>
</li>
<li><p>Performance Tuning<br><a href="https://www.ejabberd.im/tuning" target="_blank" rel="external">https://www.ejabberd.im/tuning</a></p>
</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="第一阶段">第一阶段</h2><p>目标10W并发连接</p>
<h2 id="进程打开文件数限制">进程打开文件数限制</h2><ol>
<li>编辑 <code>/etc/pam.d/login</code>,取消<code>pam_limits.so</co]]>
    </summary>
    
      <category term="Performance" scheme="http://developerworks.github.io/tags/Performance/"/>
    
      <category term="Ejabberd" scheme="http://developerworks.github.io/categories/Ejabberd/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用Tsung对Ejabberd进行性能测试]]></title>
    <link href="http://developerworks.github.io/2015/03/12/ejabberd-benchmark-with-tsung/"/>
    <id>http://developerworks.github.io/2015/03/12/ejabberd-benchmark-with-tsung/</id>
    <published>2015-03-12T10:16:24.000Z</published>
    <updated>2015-03-20T17:14:38.000Z</updated>
    <content type="html"><![CDATA[<h2 id="测试环境">测试环境</h2><ul>
<li><p>操作系统:</p>
<p>  <code>Ubuntu Server 14.04</code></p>
</li>
<li><p>Erlang版本</p>
<p>  <code>OTP 17.4</code></p>
</li>
<li><p>Ejabberd版本</p>
<p>  <code>15.02</code></p>
</li>
</ul>
<h2 id="依赖包">依赖包</h2><p>安装生成报告需要的<code>gnuplot</code>软件包和<code>Template.pm</code> Perl模块.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install -y gnuplot&#10;apt-get install -y templatetoolkit-perl</span><br></pre></td></tr></table></figure>
<h2 id="命令行">命令行</h2><h2 id="编写配置文件">编写配置文件</h2><h2 id="生成报告">生成报告</h2><p><code>tsung</code> 会在你的Home目录<code>~/.tsung/log</code>中生成测试报告, 进入到报告目录执行 <code>/usr/lib/tsung/bin/tsung_stats.pl</code> 可在报告目录下生成HTML格式的统计信息, 可用浏览器打开查看.</p>
<p>例如:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@scm:cd ~/.tsung/log/20150312-1407&#10;root@scm:/usr/lib/tsung/bin/tsung_stats.pl&#10;root@scm:~/.tsung/log/20150312-1746# ll&#10;drwxr-xr-x 2 root root     4096 Mar 12 20:28 data/&#10;-rw-r--r-- 1 root root    13720 Mar 12 20:32 gnuplot.log&#10;drwxr-xr-x 2 root root     4096 Mar 12 20:28 gnuplot_scripts/&#10;-rw-r--r-- 1 root root     7166 Mar 12 20:32 graph.html&#10;drwxr-xr-x 2 root root     4096 Mar 12 20:28 images/&#10;-rw-r--r-- 1 root root     1388 Mar 12 17:46 jabber_register.xml&#10;-rw-r--r-- 1 root root  1011724 Mar 12 17:51 match.log&#10;-rw-r--r-- 1 root root     8169 Mar 12 20:32 report.html&#10;-rw-r--r-- 1 root root 23789099 Mar 12 17:51 tsung_controller@scm.log&#10;-rw-r--r-- 1 root root    20601 Mar 12 17:51 tsung.log</span><br></pre></td></tr></table></figure>
<h2 id="用多个虚拟IP增大并发量">用多个虚拟IP增大并发量</h2><p>设置临时虚拟IP(重启后消失)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig eth1:0 192.168.8.35 netmask 255.255.255.0 up&#10;ifconfig eth1:1 192.168.8.36 netmask 255.255.255.0 up&#10;ifconfig eth1:2 192.168.8.37 netmask 255.255.255.0 up</span><br></pre></td></tr></table></figure>
<p><a href="http://tsung.erlang-projects.org/user_manual/conf-client-server.html#advanced-setup" target="_blank" rel="external">http://tsung.erlang-projects.org/user_manual/conf-client-server.html#advanced-setup</a></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">clients</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">client</span> <span class="attribute">host</span>=<span class="value">"louxor"</span> <span class="attribute">weight</span>=<span class="value">"1"</span> <span class="attribute">maxusers</span>=<span class="value">"800"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">ip</span> <span class="attribute">value</span>=<span class="value">"10.9.195.12"</span>&gt;</span><span class="tag">&lt;/<span class="title">ip</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">ip</span> <span class="attribute">value</span>=<span class="value">"10.9.195.13"</span>&gt;</span><span class="tag">&lt;/<span class="title">ip</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">client</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">client</span> <span class="attribute">host</span>=<span class="value">"memphis"</span> <span class="attribute">weight</span>=<span class="value">"3"</span> <span class="attribute">maxusers</span>=<span class="value">"600"</span> <span class="attribute">cpu</span>=<span class="value">"2"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">clients</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">servers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">server</span> <span class="attribute">host</span>=<span class="value">"10.9.195.1"</span> <span class="attribute">port</span>=<span class="value">"8080"</span> <span class="attribute">type</span>=<span class="value">"tcp"</span>&gt;</span><span class="tag">&lt;/<span class="title">server</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">servers</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>多个虚拟IP可以用于模拟多个机器. 这在负载均衡器使用客户端IP把流量分布到集群中的服务器上时特别有用. 在<code>tsung 1.1.1</code>中IP不再是强制要求了.</p>
<p>在<code>1.4.0</code>中, 可以使用<code>&lt;ip scan=&quot;yes&quot; value=&quot;eth0&quot;/&gt;</code>扫描给定接口的所有IP别名(此例中为<code>eth0</code>)</p>
<blockquote>
<p>Even if an Erlang VM is now able to handle several CPUs (erlang SMP), benchmarks shows that it’s more efficient to use one VM per CPU (with SMP disabled) for tsung clients. Only the controller node is using SMP erlang. Therefore, <strong>cpu should be equal to the number of cores of your nodes</strong>. If you prefer to use erlang SMP, add the <code>-s</code> option when starting tsung (and don’t set <code>cpu</code> in the config file).</p>
</blockquote>
<p>默认, 负载均匀分地布在所有CPU上(默认每客户端一个CPU). 权重(weight)参数(整数)可用于分布客户端机器的负载比例.</p>
<p>例如, 如果一个客户端具有权重为1,其他客户端有权重为2, 那么后者启动的用户数为前者的两倍(比例将为1/3和2/3), 在先前的例子中, 第二个客户端又2个CPU,权重为3, 每CPU的权重为1.5</p>
<h2 id="分布式测试">分布式测试</h2><p><img src="/assets/ejabberd/distributed-test.jpg" alt="分布式测试"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#60;client host=&#34;t1&#34; cpu=&#34;8&#34; maxusers=&#34;100000&#34;&#62;&#60;/client&#62;&#10;&#60;client host=&#34;t2&#34; cpu=&#34;8&#34; maxusers=&#34;100000&#34;&#62;&#60;/client&#62;&#10;&#60;client host=&#34;t3&#34; cpu=&#34;8&#34; maxusers=&#34;100000&#34;&#62;&#60;/client&#62;</span><br></pre></td></tr></table></figure>
<p><a href="http://my.oschina.net/jielucky/blog/168320" target="_blank" rel="external">http://my.oschina.net/jielucky/blog/168320</a></p>
<h2 id="分布式测试的关键">分布式测试的关键</h2><ul>
<li>相同的Erlang Cookie</li>
<li>控制器主机(Master)能够无密码登陆到(Slave)机器上, Master/Slave的机器必须都要安装Tsung</li>
<li>配置文件中的<code>&lt;client host=&quot;hostname&quot;&gt;</code>, 其中属性<code>host</code>必须是名称而不能是IP地址, 因此要么在<code>/etc/hosts</code>添加相应的解析条目, 要么直接使用DNS</li>
</ul>
<h2 id="关于后端使用MySQL数据库的情况">关于后端使用MySQL数据库的情况</h2><ul>
<li>把<code>users</code>表调整为MEMORY引擎</li>
<li>修改<code>s2c_shaper</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shaper:&#10;  normal: 10000&#10;  fast: 50000</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c2s_shaper:&#10;  admin: none&#10;  all: fast</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">listen:&#10;  -&#10;    port: 5222&#10;    module: ejabberd_c2s&#10;    max_stanza_size: 65536&#10;    shaper: c2s_shaper&#10;    access: c2s&#10;    zlib: true</span><br></pre></td></tr></table></figure>
<h1 id="参考资料">参考资料</h1><ol>
<li><a href="http://tsung.erlang-projects.org/user_manual/reports.html" target="_blank" rel="external">http://tsung.erlang-projects.org/user_manual/reports.html</a></li>
<li><a href="http://blog.chinaunix.net/uid-13189580-id-3049461.html" target="_blank" rel="external">http://blog.chinaunix.net/uid-13189580-id-3049461.html</a></li>
<li><a href="http://my.oschina.net/jielucky/blog/168320" target="_blank" rel="external">http://my.oschina.net/jielucky/blog/168320</a></li>
<li><a href="http://stackoverflow.com/questions/23011544/simulating-online-user-in-ejabberd-with-tsung" target="_blank" rel="external">http://stackoverflow.com/questions/23011544/simulating-online-user-in-ejabberd-with-tsung</a></li>
<li><a href="http://www.quora.com/Ejabberd-load-test-with-tsung" target="_blank" rel="external">http://www.quora.com/Ejabberd-load-test-with-tsung</a></li>
<li><a href="http://vidorsolutions.blogspot.jp/2010/12/load-testing-ejabberd-xmpp-server-with.html" target="_blank" rel="external">http://vidorsolutions.blogspot.jp/2010/12/load-testing-ejabberd-xmpp-server-with.html</a></li>
<li><a href="https://pdincau.wordpress.com/2010/08/01/testing-your-xmpp-external-component-using-tsung-and-ejabberd-part-2/" target="_blank" rel="external">https://pdincau.wordpress.com/2010/08/01/testing-your-xmpp-external-component-using-tsung-and-ejabberd-part-2/</a></li>
<li><a href="http://cryolite.iteye.com/blog/378758" target="_blank" rel="external">http://cryolite.iteye.com/blog/378758</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="测试环境">测试环境</h2><ul>
<li><p>操作系统:</p>
<p>  <code>Ubuntu Server 14.04</code></p>
</li>
<li><p>Erlang版本</p>
<p>  <code>OTP 17.4</code><]]>
    </summary>
    
      <category term="Tsung" scheme="http://developerworks.github.io/tags/Tsung/"/>
    
      <category term="Ejabberd" scheme="http://developerworks.github.io/categories/Ejabberd/"/>
    
  </entry>
  
</feed>
